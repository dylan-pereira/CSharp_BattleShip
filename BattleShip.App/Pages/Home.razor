@page "/"
@inject IGameService GameService
@inject GameState GameState
@inject HttpClient HttpClient

<PageTitle>BattleShip</PageTitle>
<img id="logo" src="images/battleship_logo.png" alt="logo" />
<div id="hudcontainer">
    <div id="hud">
        <div id="button-group">
            <button class="button" @onclick="StartNewGame">Nouvelle Partie</button>
            <button class="button" @onclick="RandomPlay">Jouer aléatoirement</button>
        </div>
        <div id="result" class="@(GameState.WinnerName != null ? "": "notshow")">

            <text> @GameState.WinnerName</text>&nbsp;a remporté la partie !
        </div>
    </div>
</div>

<div id="game" class="@(GameState.Id != Guid.Empty ? "": "notshow")">
    <div>
        <div class="stats">
            <h3>Joueur</h3>
            <div>
                Nombre de bateau détruits : 7/12
            </div>
        </div>
        <table>
            @for (int i = 0; i < 10; i++)
            {
                <tr>
                    @for (int j = 0; j < 10; j++)
                    {
                        @if (j == 3)
                        {

                        }
                        <td>
                    @if (GameState.PlayerGrid[i, j] == 'X')
                            {
                                <img src="images/hit.png" alt="Hit" />
                            }
                            else if (GameState.PlayerGrid[i, j] == 'O')
                            {
                                <img src="images/miss.png" alt="Miss" />
                            }
                            else if (GameState.PlayerGrid[i, j] != '\0')
                            {
                                <text>@GameState.PlayerGrid[i, j]</text>
                            }
                        </td>
                        @if (j == 3)
                        {
                        }

                    }

                </tr>
            }
        </table>
    </div>
    <div>
        <div class="stats">
            <h3>Adversaire</h3>
            <div>
                Nombre de bateau détruits : 7/12
            </div>
        </div>
        <table>
            @for (int i = 0; i < 10; i++)
            {
                <tr>
                    @for (int j = 0; j < 10; j++)
                    {
                        int ii = i;
                        int jj = j;
                        <td class="clickable" @onclick="() => AttackOpponent(ii, jj)">
                            @if (GameState.OpponentGrid[i, j] == true)
                            {
                                <img src="images/hit.png" alt="Hit" />
                            }
                            else if (GameState.OpponentGrid[i, j] == false)
                            {
                                <img src="images/miss.png" alt="Miss" />
                            }
                        </td>
                    }
                </tr>
            }
        </table>
    </div>
</div>
@code {
    private async Task StartNewGame()
    {
        var gameData = await GameService.StartNewGame();
        if (gameData != null)
        {
            GameState.ResetGame();

            GameState.Id = gameData.gameId;

            if (gameData.playerShips != null)
            {
                foreach (var ship in gameData.playerShips)
                {
                    foreach (var coordinate in ship.Coordinates)
                    {
                        if (ship.Letter != null)
                            GameState.PlayerGrid[coordinate.X, coordinate.Y] = ship.Letter[0];
                    }
                }
                StateHasChanged();
            }
        }
    }

    private async void RandomPlay()
    {
        while (GameState.WinnerName == null)
        {
            Console.WriteLine(GameState.WinnerName);

            Random rand = new Random();
            int x = rand.Next(0, 10);
            int y = rand.Next(0, 10);
            await AttackOpponent(x, y);
        }
        StateHasChanged();
    }

    private async Task AttackOpponent(int x, int y)
    {
        if (GameState.OpponentGrid[x, y] == null && GameState.WinnerName == null)
        {
            var gameData = await GameService.AttackOpponent(GameState.Id, x, y);
            if (gameData != null)
            {

                if (gameData.PlayerAttackResponse == 'O')
                {
                    GameState.OpponentGrid[x, y] = false;
                }
                else if (gameData.PlayerAttackResponse == 'X')
                {
                    GameState.OpponentGrid[x, y] = true;
                }
                if (gameData.Winner != null)
                {
                    GameState.WinnerName = gameData.Winner;
                    Console.WriteLine($"Winner ! {gameData.Winner}");
                }
                if (gameData.ComputerAttackCoordinates != null && gameData.ComputerAttackCoordinates.X != -1 &&
                gameData.ComputerAttackCoordinates.Y != -1)
                    GameState.PlayerGrid[gameData.ComputerAttackCoordinates.X, gameData.ComputerAttackCoordinates.Y] =
                    gameData.ComputerAttackResponse;
                StateHasChanged();
            }
        }
    }
}