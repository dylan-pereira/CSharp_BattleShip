@page "/"
@inject IGameService GameService
@inject GameState GameState
@inject HttpClient HttpClient

<PageTitle>BattleShip</PageTitle>
<img id="logo" src="images/battleship_logo.png" alt="logo" />
<div id="hudcontainer">
    <div id="hud">
        <div id="player-name-input">
            <label for="player-name">Nom du joueur :</label>
            <input type="text" id="player-name" @bind="inputPlayerNameValue" />
            <button @onclick="ChangePlayerName">OK</button>
        </div>
        <div id="button-group">
            <button class="button" @onclick="StartNewGame">Nouvelle Partie</button>
            <button class="button" @onclick="RandomPlay">Jouer aléatoirement</button>
        </div>
        <div id="difficulty-selector">
            <label for="difficulty">Difficulté IA :</label>
            <select id="difficulty" @onchange="ChangeDifficulty">
                <option value="0">Facile</option>
                <option value="1">Moyen</option>
                <option value="2">Sucidaire</option>
            </select>
        </div>
    </div>
</div>

<div id="leaderboard">
    <button class="button" @onclick="ShowLeaderboard">Classement</button>
</div>

<div @onclick="StartNewGame" class="@(GameState.WinnerName != null ? "modal": "notshow modal")">
    <div>
        <text> @GameState.WinnerName</text>&nbsp;a remporté la partie !
    </div>
</div>

<div @onclick="ResetLeaderboard" id="leaderboard-modal"
    class="@(GameState.Leaderboard != null ? "modal": "notshow modal")">
    @if (GameState.Leaderboard != null && GameState.Leaderboard.Any())
    {
        <table>
            <thead>
                <tr>
                    <th>Position</th>
                    <th>Nom</th>
                    <th>Nombre de victoires</th>
                    <th>Dernière victoire</th>
                </tr>
            </thead>
            <tbody>
                @{
                    var sortedLeaderboard = GameState.Leaderboard.OrderByDescending(leader => leader.Wins).ToList();
                    for (int i = 0; i < sortedLeaderboard.Count; i++)
                    {
                        var leader = sortedLeaderboard[i];
                        <tr>
                            <td>@(i + 1)</td>
                            <td>@leader.Name</td>
                            <td width=10>@leader.Wins</td>
                            <td style="font-size:18px;">@leader.LastWin</td>
                        </tr>
                    }
                }
            </tbody>
        </table>
    }
</div>

<div id="game" class="@(GameState.Id != Guid.Empty ? "": "notshow")">
    <div>
        <div class="stats">
            <span class="bold"> @GameState.PlayerName</span>
            <div>
                Nombre de bateau détruits :&nbsp;<span class="bold"><text> @GameState.GetNumberOfDestroyedShipPlayer()
                    </text>/<text>
                        @GameState.GetTotalShipSize() </text></span>
            </div>
        </div>
        <table>
            @for (int i = 0; i < 10; i++)
            {
                <tr>
                    @for (int j = 0; j < 10; j++)
                    {
                        <td>
                            @if (GameState.PlayerShips != null)
                            {
                                @foreach (var ship in GameState.PlayerShips)
                                {
                                    if (ship.getFirstCoordinates().X == i && ship.getFirstCoordinates().Y == j)
                                    {
                                        <div style="position:relative" class=" @(ship.Horizontal ? "notHorizontal" : "" )"><img
                                                class=" @(ship.Horizontal ? "notHorizontalImage shipImage" : "shipImage" )"
                                                style="width: @(50 * ship.Size)px;" src="@ship.ImagePath" alt="Ship" />
                                        </div>
                                    }
                                }
                            }

                            @if (GameState.PlayerGrid[i, j] == 'X')
                            {
                                <img class="attackImage" src="images/hit.png" alt="Hit" />
                            }
                            else if (GameState.PlayerGrid[i, j] == 'O')
                            {
                                <img class="attackImage" src="images/miss.png" alt="Miss" />
                            }
                            else if (GameState.PlayerGrid[i, j] != '\0')
                            {
                                //TODO: delete this, il faut repositionner les bateaux
                                <text>.</text>

                            }
                        </td>

                    }

                </tr>
            }
        </table>
    </div>
    <div>
        <div class="stats">
            <span class="bold"> Adversaire</span>
            <div>
                Nombre de bateau détruits :&nbsp;<span class="bold"><text> @GameState.GetNumberOfDestroyedShipOpponent()
                    </text>/<text>
                        @GameState.GetTotalShipSize() </text></span>
            </div>
        </div>
        <table>
            @for (int i = 0; i < 10; i++)
            {
                <tr>
                    @for (int j = 0; j < 10; j++)
                    {
                        int ii = i;
                        int jj = j;
                        <td class="clickable" @onclick="() => AttackOpponent(ii, jj)">
                            @if (GameState.OpponentGrid[i, j] == true)
                            {
                                <img src="images/hit.png" alt="Hit" />
                            }
                            else if (GameState.OpponentGrid[i, j] == false)
                            {
                                <img src="images/miss.png" alt="Miss" />
                            }
                        </td>
                    }
                </tr>
            }
        </table>
    </div>
</div>
@code {
    private string inputPlayerNameValue { get; set; } = "";

    private async Task StartNewGame()
    {
        var gameData = await GameService.StartNewGame();
        if (gameData != null)
        {
            GameState.ResetGame();

            GameState.Id = gameData.gameId;
            await GameService.ChangeDifficulty(GameState.Id, GameState.Difficulty);

            GameState.PlayerShips = gameData.PlayerShips;
            if (GameState.PlayerShips != null)
            {
                foreach (var ship in GameState.PlayerShips)
                {
                    foreach (var coordinate in ship.Coordinates)
                    {
                        if (ship.Letter != null)
                            GameState.PlayerGrid[coordinate.X, coordinate.Y] = ship.Letter[0];
                    }
                }
                StateHasChanged();
            }
        }
    }

    private async void RandomPlay()
    {
        while (GameState.WinnerName == null)
        {
            Console.WriteLine(GameState.WinnerName);

            Random rand = new Random();
            int x = rand.Next(0, 10);
            int y = rand.Next(0, 10);
            await AttackOpponent(x, y);
        }
        StateHasChanged();
    }

    private async void ResetLeaderboard()
    {
        GameState.Leaderboard = null;
        StateHasChanged();
    }

    private async void ShowLeaderboard()
    {
        var response = await GameService.GetLeaderboard();
        GameState.Leaderboard = response;
        StateHasChanged();
    }

    private async Task AttackOpponent(int x, int y)
    {
        if (GameState.OpponentGrid[x, y] == null && GameState.WinnerName == null)
        {
            var gameData = await GameService.AttackOpponent(GameState.Id, x, y);
            if (gameData != null)
            {

                if (gameData.PlayerAttackResponse == 'O')
                {
                    GameState.OpponentGrid[x, y] = false;
                }
                else if (gameData.PlayerAttackResponse == 'X')
                {
                    GameState.OpponentGrid[x, y] = true;
                }
                if (gameData.Winner != null)
                {
                    GameState.WinnerName = gameData.Winner;
                }
                if (gameData.OpponentAttackResponseToReplace != null && gameData.OpponentAttackResponseToReplace.AttackedCoordinates !=
                null)
                {
                    GameState.PlayerGrid[gameData.OpponentAttackResponseToReplace.AttackedCoordinates.X,
                    gameData.OpponentAttackResponseToReplace.AttackedCoordinates.Y] =
                    gameData.OpponentAttackResponseToReplace.AttackResult;
                }
                /*if (gameData.OpponentAttackCoordinates != null && gameData.OpponentAttackCoordinates.X != -1 &&
                gameData.OpponentAttackCoordinates.Y != -1)
                GameState.PlayerGrid[gameData.OpponentAttackCoordinates.X, gameData.OpponentAttackCoordinates.Y] =
                gameData.OpponentAttackResponse;*/
                StateHasChanged();
            }
        }
    }
    private async Task ChangeDifficulty(ChangeEventArgs e)
    {
        GameState.Difficulty = Convert.ToInt32(e.Value); ;
        var response = await GameService.ChangeDifficulty(GameState.Id, GameState.Difficulty);

    }

    private async Task ChangePlayerName()
    {
        //var playerName = await JSRuntime.InvokeAsync<string>("getPlayerName");
        Console.WriteLine(inputPlayerNameValue);
        GameState.PlayerName = inputPlayerNameValue;
        //await GameService.UpdatePlayerName(playerName);
        StateHasChanged();
    }

}